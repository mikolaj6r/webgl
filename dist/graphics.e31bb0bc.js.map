{"version":3,"sources":["index.js"],"names":["canv","document","getElementById","gl","getContext","e","alert","vsSource","fsSource","shaderProgram","initShaderProgram","vert","viewport","width","height","clearColor","clear","COLOR_BUFFER_BIT","useProgram","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader"],"mappings":"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","file":"graphics.e31bb0bc.js","sourceRoot":"..","sourcesContent":["(function() {\r\n  const canv = document.getElementById(\"canvas\");\r\n  let gl = null;\r\n  try {\r\n    gl = canv.getContext(\"webgl2\");\r\n  } catch (e) {}\r\n  if (!gl) alert(\"webgl not found\");\r\n\r\n  const vsSource = `\r\n    attribute vec4 aPos;\r\n\r\n\r\n    uniform mat4 MVP;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    void main(){\r\n        gl_Position = MVP * aPos;\r\n    }\r\n\r\n  `;\r\n\r\n  const fsSource = `\r\n    void main(){\r\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n  `;\r\n\r\n  const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n  const vert = [\r\n    0,\r\n    0,\r\n    0,\r\n    1,\r\n    0,\r\n    0,\r\n    1,\r\n    1,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    1,\r\n    1,\r\n    0,\r\n    0,\r\n    1,\r\n    0,\r\n\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    0,\r\n    1,\r\n    0,\r\n    0,\r\n    1,\r\n    0,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    1,\r\n    0,\r\n    0,\r\n    1\r\n  ];\r\n\r\n  gl.viewport(0, 0, canv.width, canv.height);\r\n  gl.clearColor(1.0, 0.0, 0.0, 1.0);\r\n  gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n  gl.useProgram(shaderProgram);\r\n})();\r\n\r\nfunction initShaderProgram(gl, vsSource, fsSource) {\r\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n\r\n  gl.linkProgram(shaderProgram);\r\n\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert(\"Unable to initalize\" + gl.getProgramInfoLog(shaderProgram));\r\n    return null;\r\n  }\r\n\r\n  return shaderProgram;\r\n}\r\n\r\nfunction loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert(\"error during compiling\" + gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n  return shader;\r\n}\r\n"]}